```{r}
## Section 6: Subsetting with Logical Operators
Remember your logical symbols from Part 1?
```{r}
?"=="
?"=="
We can subset rows based on a logical condition in one column. Let's get
the rows where the experiment number is equal to 4, and only choose
specific columns:
```{r}
sleep_logical <- sleep_VIM[sleep_VIM$Exp == 4, 8:10]
dim(sleep_logical)
head(sleep_logical)
sleep_logical <- sleep_VIM[sleep_VIM$Exp == 4, 8:10]
dim(sleep_logical)
head(sleep_logical)
We can also subset based on multiple conditions. We'll need the AND and
OR operators for this:
```{r}
?"&"
?"|"
?"&"
?"|"
`&` (and) means that all conditions must be TRUE. Let's subset rows
where Exp is 1 AND Danger is 2:
```{r}
sleep_logical_and <- sleep_VIM[(sleep_VIM$Exp == 1) & (sleep_VIM$Danger== 2), ]
dim(sleep_logical_and) head(sleep_logical_and)
sleep_logical_and <- sleep_VIM[(sleep_VIM$Exp == 1) & (sleep_VIM$Danger== 2), ]
dim(sleep_logical_and) head(sleep_logical_and)
`|` (or) means that just one of the conditions must be TRUE. Let's
subset rows where Exp is 1 OR Danger is 2.
Do you think we will get more or less rows returned? Why or why not?
```{r}
sleep_logical_or <- sleep_VIM[(sleep_VIM$Exp == 1) | (sleep_VIM$Danger == 2), ]
dim(sleep_logical_or)
head(sleep_logical_or)
sleep_logical_or <- sleep_VIM[(sleep_VIM$Exp == 1) | (sleep_VIM$Danger == 2), ]
dim(sleep_logical_or)
head(sleep_logical_or)
## Section 7: Subsetting Lists
Recall that lists are different from vectors and data frames. They can
contain heterogeneous data types. We can also subset lists with double
brackets "[[]]"
```{r}
?"[["
example_list
What happens with one bracket? Both the placeholder and the value are
returned:
```{r}
example_list[1]
example_list[[1]]
## Section 8: Using dplyr to Subset Data Frames
A modern approach to interacting with data frames is called dplyr. This
package is part of the tidyverse, a suite of packages that helps
facilitate data science in R.
We need to first install this package. We can do so by running the
install.packages() function:
```{r}
install.packages("dplyr")
It's good practice to pass the names of packages as a vector of names,
and a requirement if you want to install more than one package at a
time. The reason for this is that the second argument in
install.packages() is the place on your computer where you want to
install packages. R is smart enough to know what you mean by default if
you just pass a single argument, but install.packages("dplyr",
"anotherPackage") will lead to a cryptic warning that "lib =
"anotherPackage" is not writable. Wrapping our packages in c() avoids
this problem.
Now that it's installed, we need to import it to our current R session:
In dplyr, we can use the "select" function to select columns:
Notice how we don't need to use quotation marks. dplyr is smart enough
to figure out when we're talking about columns. We can also use the
filter() function to subset rows according to logical condition:
dplyr comes with a "piping" operator that allows us to perform multiple
computations on the same data frame in a single command.
This operator is `%>%`: you can think of it as taking the output of the
left hand side, and passing it into the function on the right hand side.
Let's see it in action:
Notice that we didn't need to pass sleep_VIM as the first argument of
each function. The piping operator takes care of this for us. If you'd
like to learn more about how to use dplyr to perform analysis, check out
the Data Wrangling in R workshop!
## Section 9: Missing Data
Let's review missing data:
```{r}
mean(sleep_VIM$NonD)
mean(sleep_VIM$NonD)
This returns NA because R is unsure how to deal with NA cells for the
mean computation. What happens if we use the na.rm = TRUE argument? It
now computes the mean!
```{r}
mean(sleep_VIM$NonD, na.rm = TRUE)
mean(sleep_VIM$NonD, na.rm = TRUE)
We can check to see if a cell is missing with is.na:
```{r}
?is.na
is.na(sleep_VIM)
?is.na
is.na(sleep_VIM)
We can count the number of total missing cells. Why does this work?
```{r}
sum(is.na(sleep_VIM))
sum(is.na(sleep_VIM))
Perhaps we'd like to extract rows where NonD is *not* missing. We can do
this using the ! operator and dplyr:
```{r}
sleep_NonD <- sleep_VIM %>% filter(!is.na(NonD))
head(sleep_NonD)
sleep_NonD <- sleep_VIM %>% filter(!is.na(NonD))
How can we check whether the new data frame does in fact have no missing
values for NonD? Maybe we'd like to extract the *rows* that have no
missing values (rather than a specific column). Another package in the
tidyverse - tidyr - provides us a useful function to do this:
```{r}
install.packages(c("tidyr"))
tidyr typically contains functions which allow you to transform your
data frames from longer to wider (this is called pivoting). It also
contains the `drop_na()` function, which is useful in this case:
## Section 10: Merging Data Frames
We can merge two data frames by a column that is shared by both using
the merge() function:
Let's make a toy dataframe:
df_merge
In dplyr, there are several "join" functions used to perform merges.
These include `inner_join()`, `left_join()`, `right_join()`, and
`full_join()`. The variations consist of how to treat cases when there
might not be a one-to-one mapping between two rows of a data frame.
Let's try the full_join() on the above example:
```{r}
df_join <- full_join(df1, df2, by = "Name")
df_join
df_join <- full_join(df1, df2, by = "Name")
### Challenge 4
Consider the following data frame:
```{r}
challenge_df <- data.frame(Name = c("Joe", "Susan",
"Juan","Preeti"),
City = c("Berkeley", "Berkeley",
"San Mateo", "San Jose"),
Physics = c(20, 21, 22, 23),
Chemistry = c(23, 22, 21, 20))
challenge_df <- data.frame(Name = c("Joe", "Susan",
"Juan","Preeti"),
City = c("Berkeley", "Berkeley",
"San Mateo", "San Jose"),
Physics = c(20, 21, 22, 23),
Chemistry = c(23, 22, 21, 20))
1.  Use the `merge()` function to merge df_merge and challenge_df by
Name. What do you notice about the columns? How many rows are there?
```{r}
2.  Use the `inner_join()` function from dplyr to merge df_merge and
challenge_df by Name. What happens if you merge by Name and City?
```{r}
3.  Use the `left_join()` function to merge df_merge and challenge_df by
Name and City. Use the `right_join()` function to merge df_merge and
challenge_df by Name and City.
```{r}
4.  Use the `full_join()` function to merge df_merge and challenge_df by
Name and City.
```{r}
What do you notice about the differences among 2, 3, and 4?
### Take Home Challenge (OPTIONAL)
This take home challenge introduces the here package, a method of
organizing filepaths.
Navigating directory structures can be confusing. We have to remember a
lot of aspects of of where our files are located. This can be fragile
and dependent on the way we order files on our computers, which are
often different than the way our friends and colleagues do it.
One way to make this easier is to take advantage of the "here" R
package. A package is a set of R code, data, documentation, and tests
that are easy to share with others. The set of code usually revolves
around some kind of task. We will see several packages through this
fundamentals series.
The "here" package enables easy file referencing by using the top level
directory of our project to build the file paths. For more information,
check out the "here" package documentation
[<https://here.r-lib.org/articles/here.html>]
To use here we need to first install the package. We can do so by
running the `install.packages()` function:
```{r}
install.packages("here")
Now that it's installed, we need to import it to our current R session:
Note that it returns a file path, which tells us what our working
directory is now.Using here, we can read in our files like this
This doesn't look like much of a difference, which is a good thing! This
workshop is built around an R Project, so the file structure looks the
same on your machine. As you continue your R journey, we strongly
recommend putting your data analyses in a similar structure.
We can also add optional arguments to the `read.csv()` function with
calls to "here":
If you take more data science courses, you will start to notice this pattern to read in files often.
If you take more data science courses, you will start to notice this pattern to read in files often.
sleep_logical <- sleep_VIM[sleep_VIM$Exp == 4, 8:10]
dim(sleep_logical)
head(sleep_logical)
sleep_logical_and <- sleep_VIM[(sleep_VIM$Exp == 1) & (sleep_VIM$Danger== 2), ]
dim(sleep_logical_and)
head(sleep_logical_and)
sleep_logical_or <- sleep_VIM[(sleep_VIM$Exp == 1) | (sleep_VIM$Danger == 2), ]
dim(sleep_logical_or)
head(sleep_logical_or)
install.packages("dplyr")
install.packages(c("dplyr"))
library(dplyr)
sleep_select <- select(sleep_VIM, BodyWgt, BrainWgt)
dim(sleep_select)
head(sleep_select)
sleep_filter <- filter(sleep_VIM, Exp == 1 & Danger == 2)
dim(sleep_filter)
head(sleep_filter)
sleep_pipe <- sleep_VIM %>%
filter(Exp == 1 & Danger == 2) %>%
select(BodyWgt, BrainWgt)
dim(sleep_pipe)
head(sleep_pipe)
?NA
?mean # Scroll down to "na.rm".
## Let's see how this works on our sleep_VIM data:
mean(sleep_VIM$NonD)
mean(sleep_VIM$NonD, na.rm = TRUE)
mean(sleep_VIM$NonD, na.rm = TRUE)
mean(sleep_VIM$NonD, na.rm = TRUE)
?is.na
is.na(sleep_VIM)
mean(sleep_VIM$NonD, na.rm = TRUE)
sleep_subset_ints <- sleep_VIM[, c(3, 5, 9)] dim(sleep_subset_ints)
sleep_subset_names <- sleep_VIM[, c("BodyWgt", "BrainWgt")]
dim(sleep_subset_names)
head(sleep_subset_names)
names(sleep_VIM)
sleep_subset_ints <- sleep_VIM[, c(3, 5, 9)] dim(sleep_subset_ints)
sleep_VIM <- read.csv(file = "data/sleep_VIM.csv",
# Place column names in header row outside of the data
header = TRUE,
# Tell R to code anything defined here as NA
na.strings = c("", " ", "?", "NONE", "none"))
sleep_VIM
sleep_VIM$Dream
sleep_VIM
sleep_subset_names <- sleep_VIM[, c("BodyWgt", "BrainWgt")]
dim(sleep_subset_names)
head(sleep_subset_names)
names(sleep_VIM)
sleep_subset_ints <- sleep_VIM[, c(3, 5, 9)] dim(sleep_subset_ints)
head(sleep_subset_ints)
sleep_subset_ints <- sleep_VIM[[, c(3, 5, 9)] dim(sleep_subset_ints)]
sleep_subset_ints <- sleep_VIM[, c(3, 5, 9)] Down(sleep_subset_ints)
head(sleep_subset_ints)
sleep_subset_ints <- sleep_VIM[, c(3, 5, 9)]
dim(sleep_subset_ints)
head(sleep_subset_ints)
heart_subset_names <- heart[, c("sex", "trestbps", "target")]
dim(heart_subset_names)
head(heart_subset_names)
names(sleep_VIM)
sleep_subset_neg <- sleep_VIM[, -c(1, 2)]
dim(sleep_subset_neg)
head(sleep_subset_neg)
heart_subset_names <- heart[c(3:7,12), c(2,4,14)]
dim(heart_subset_names)
head(heart_subset_names)
?"=="
sleep_logical <- sleep_VIM[sleep_VIM$Exp == 4, 8:10]
dim(sleep_logical)
head(sleep_logical)
sleep_logical_and <- sleep_VIM[(sleep_VIM$Exp == 1) & (sleep_VIM$Danger== 2), ]
dim(sleep_logical_and)
head(sleep_logical_and)
sleep_logical_or <- sleep_VIM[(sleep_VIM$Exp == 1) | (sleep_VIM$Danger == 2), ]
dim(sleep_logical_or)
head(sleep_logical_or)
example_list <- list(TRUE, "string data", 5, list(1, 2, 3))
example_list
example_list[1]
## What about double brackets? Just the value is returned:
example_list[[1]]
install.packages("dplyr")
library(dplyr)
sleep_select <- select(sleep_VIM, BodyWgt, BrainWgt)
dim(sleep_select)
head(sleep_select)
sleep_filter <- filter(sleep_VIM, Exp == 1 & Danger == 2)
dim(sleep_filter)
head(sleep_filter)
sleep_pipe <- sleep_VIM %>%
filter(Exp == 1 & Danger == 2) %>%
select(BodyWgt, BrainWgt)
dim(sleep_pipe)
head(sleep_pipe)
?mean # Scroll down to "na.rm".
mean(sleep_VIM$NonD)
mean(sleep_VIM$NonD, na.rm = TRUE)
mean(sleep_VIM$NonD, na.rm = TRUE)
View(sleep_VIM)
View(sleep_VIM)
View(sleep_VIM)
View(sleep_VIM[, "NonD"])
list(sleep_VIM[, "NonD"])
View(sleep_VIM[, "NonD"])
class(sleep_VIM$NonD)
sleep_VIM$NonD <- as.numeric(as.character(sleep_VIM$NonD))
class(sleep_VIM$NonD)
mean(sleep_VIM$NonD, na.rm = TRUE)
mean(sleep_VIM$NonD)
mean(sleep_VIM$NonD, na.rm = TRUE)
is.na(sleep_VIM)
sum(is.na(sleep_VIM))
sleep_NonD <- sleep_VIM %>% filter(!is.na(NonD))
head(sleep_NonD)
install.packages(c("tidyr"))
library(tidyr)
sleep_non_missing <- sleep_VIM %>%
drop_na()
dim(sleep_non_missing)
sum(is.na(sleep_non_missing))
?merge
df1 <- data.frame(Name = c("Joe", "Susan", "Jack", "Kelly"),
City = c("Berkeley", "Berkeley",
"Oakland", "Oakland"),
Math = c(42, 48, 50,46),
Reading = c(8, 10, 10, 10))
df1
df2 <- data.frame(Name = c("Joe", "Susan", "Jack", "Kelly"),
Science = c(99, 100, 99, 100),
Music = c(19, 18, 20, 20),
Art = c(20, 20, 19, 18))
df2
## Merge the dataframes
df_merge <- merge(df1, df2, by = "Name")
df_merge
sleep_VIM <- as.numeric(as.character(sleep_VIM))
View(sleep_VIM)
sleep_VIM <- read.csv(file = "data/sleep_VIM.csv",
# Place column names in header row outside of the data
header = TRUE,
stringsAsFactors=FALSE,
# Tell R to code anything defined here as NA
na.strings = c("", " ", "?", "NONE", "none"))
sleep_VIM
class(sleep_VIM$NonD)
sleep_VIM <- read.csv(file = "data/sleep_VIM.csv",
# Place column names in header row outside of the data
header = TRUE,
# Tell R to code anything defined here as NA
na.strings = c("", " ", "?", "NONE", "none"))
sleep_VIM <- read.csv(file = "data/sleep_VIM.csv",
# Place column names in header row outside of the data
header = TRUE,
# Tell R to code anything defined here as NA
na.strings = "NA")
class(sleep_VIM$NonD)
sleep_NonD <- sleep_VIM %>% filter(!is.na(NonD))
head(sleep_NonD)
install.packages(c("tidyr"))
library(tidyr)
sleep_non_missing <- sleep_VIM %>%
drop_na()
dim(sleep_non_missing)
sum(is.na(sleep_non_missing))
df1 <- data.frame(Name = c("Joe", "Susan", "Jack", "Kelly"),
City = c("Berkeley", "Berkeley",
"Oakland", "Oakland"),
Math = c(42, 48, 50,46),
Reading = c(8, 10, 10, 10))
df1
df2 <- data.frame(Name = c("Joe", "Susan", "Jack", "Kelly"),
Science = c(99, 100, 99, 100),
Music = c(19, 18, 20, 20),
Art = c(20, 20, 19, 18))
df2
## Merge the dataframes
df_merge <- merge(df1, df2, by = "Name")
df_merge
df_join <- full_join(df1, df2, by = "Name")
df_join
merge(df_merge, challenge_df)
inner_join(df_merge, challenge_df)
merge(df_merge["Name"], challenge_df["Name"])
inner_join(df_merge[c("Name"], challenge_df["Name"])
inner_join(df_merge["Name"], challenge_df["Name"])
inner_join(df_merge[c("Name", "City")], challenge_df[c("Name", "City")])
merge(df_merge, challenge_df, by="Name")
inner_join(df_merge, challenge_df, by=c("Name"))
inner_join(df_merge, challenge_df, by=c("Name", "City"))
inner_join(df_merge, challenge_df, by=c("Name"))
inner_join(df_merge, challenge_df, by=c("Name", "City"))
inner_join(df_merge, challenge_df, by=c("Name"))
inner_join(df_merge, challenge_df, by=c("Name", "City"))
inner_join(df_merge, challenge_df, by=c("Name"))
inner_join(df_merge, challenge_df, by=c("Name", "City"))
inner_join(df_merge, challenge_df, by=c("Name"))
left_join(df_merge, challenge_df, by=c("Name", "City"))
right_join(df_merge, challenge_df, by=c("Name", "City"))
full_join(df_merge, challenge_df, by=c("Name", "City"))
install.packages("here")
library(here)
here()
gap <- read.csv(here("data/gapminder-FiveYearData.csv"))
gap <- read.csv(file = here("data/gapminder-FiveYearData.csv"),
# Place column names in header row outside of the data
header = TRUE,
# Tell R to code anything defined here as NA
na.strings = c("", " ", "?", "NONE", "none"))
legend("topleft",
inset = 0,
title = "Continent",
cex = 1,
c("Africa", "Americas", "Asia", "Europe", "Oceania"),
col = c(1,2,3,4,5),
pch = c(1,2,3,4,5),
horiz = FALSE)
plot(x = gap$lifeExp, y = gap$gdpPercap,
main = "Life expectancy versus gdpPercap",
xlab = "Life expectancy (years)",
ylab = "gdpPercap (USD)",
# Change point colors to correspond to continents
col = as.factor(gap$continent),
# Change point symbols to correspond to continents
pch = as.integer(as.factor(as.character(gap$continent))),
# Change point size
cex = 1,
las = 1)
install.packages(c("ggplot2"))
library(ggplot2)
?ggplot2
ggplot(data = gap, aes(x = lifeExp))
ggplot(data = gap, aes(x = lifeExp)) +
geom_histogram()
ggplot(data = gap, aes(x = lifeExp)) +
geom_histogram()
gg_hist <- ggplot(data = gap, aes(x = lifeExp)) +
# Customize bar color and number
geom_histogram(fill = "blue", color = "black", bins = 10) +
# Add title
ggtitle("Life expectancy for the gap dataset") +
# Change x-axis label
xlab("Life expectancy (years)") +
# y-axis label
ylab("Frequency") +
# Change background theme
theme_classic()
print(gg_hist)
gg_box <- ggplot(data = gap,
aes(x = continent,
y = lifeExp,
fill = continent)) +
geom_boxplot() +
ggtitle("Boxplots for lifeExp by continent") +
xlab("Continent") +
ylab("Life expectancy (years)") +
theme_minimal()
print(gg_box)
gg_box <- gg_box + guides(fill = "none")
print(gg_box)
install.packages(c("cowplot"))
library(cowplot)
library(ggplot2)
heart %>% mutate (sexchar = case_when(sex == 1 ~ "male", sex == 0 ~ "female"))
gap <- read.csv(~/Documents/Backup/Important Documents/Summer Programs/Summer of 2022/ATDP - SDR0368 Data Science with R and Python/Lessons/D. Class Four (06_30_22)/data/gapminder-FiveYearData.csv)
gap <- read.csv(~Documents/Backup/Important Documents/Summer Programs/Summer of 2022/ATDP - SDR0368 Data Science with R and Python/Lessons/D. Class Four (06_30_22)/data/gapminder-FiveYearData.csv)
gap <- read.csv(~/Documents/Backup/Important Documents/Summer Programs/Summer of 2022/ATDP - SDR0368 Data Science with R and Python/Lessons/D. Class Four (06_30_22)/data/gapminder-FiveYearData.csv)
gap <- read.csv("~/Documents/Backup/Important Documents/Summer Programs/Summer of 2022/ATDP - SDR0368 Data Science with R and Python/Lessons/D. Class Four (06_30_22)/data/gapminder-FiveYearData.csv")
heart <- read.csv("~/Documents/Backup/Important Documents/Summer Programs/Summer of 2022/ATDP - SDR0368 Data Science with R and Python/Lessons/D. Class Four (06_30_22)/data/heart.csv")
nrow(gap)
nrow
dim(gap)
dim(gap)[1L]
## Is the function output equivalent to the manual method? We can use a Boolean operator to check this:
dim(gap)[1L] == nrow(gap)
```{r,eval =F}
function_name <- function(x) {
body of function
body of function
body of function
body of function
function_name <- function(x) {
body of function
function_name <- function(x) {
body of function
custom_function <- function(x){
dim(x)[1L]
}
## Is our custom_function() output the same as the nrow() output?
custom_function(gap) == nrow(gap)
## Does this work for other datasets?
custom_function(heart) == nrow(heart)
squares <- function(input) {
input^2
}
class(squares) # Returns the class of `squares`
formals(squares) # Shows the defined arguments
body(squares) # Displays the statement(s) to be evaluated
squares # Shows your function as you have written it
squares2 <- function(input) {
return(input ^ 2)
}
squares2(3)
f <- function(x, y){
return((x + y) / y)
}
## We can run this function with two inputs:
f(1, 2)
## We can also run this function while naming the input arguments:
f(x = 1, y = 2) # same output
## We can try every approach of inputting arguments:
f(x = 1, y = 2) # both named
f(x = 1, 2) # first named
f(1, y = 2) # second named
f(1, 2) # neither named
## But if we omit the second argument, what happens?
f(x = 1)
